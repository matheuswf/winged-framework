<?phpnamespace Winged\Model;use Winged\Http\Session;use Winged\Date\Date;use Winged\Validator\Validator;class Dinamic extends Model{    public function __construct()    {        parent::__construct();        return $this;    }    /** @var $id_usuario integer */    public $id_usuario;    /** @var $nome string */    public $nome;    /** @var $email string */    public $email;    /** @var $senha string */    public $senha;    /** @var $senha_antiga string */    public $senha_antiga;    /** @var $tipo integer */    public $tipo;    /** @var $data_cadastro string */    public $data_cadastro;    /** @var $session_namespace string */    public $session_namespace;    /** @var $status integer */    public $status;    /** @var $cpf string */    public $cpf;    /** @var $repeat string */    public $repeat;    /** @var $qualquer int */    public $qualquer;    public static function tableName()    {        return "usuarios";    }    public static function primaryKeyName()    {        return "id_usuario";    }    public function primaryKey($pk = false)    {        if ($pk && (is_int($pk) || intval($pk) != 0)) {            $this->id_usuario = $pk;            return $this;        }        return $this->id_usuario;    }    public function behaviors()    {        return [            'senha' => function () {                if ($this->senha != "") {                    return md5($this->senha);                }                return null;            },            'repeat' => function () {                if ($this->repeat != "") {                    return md5($this->repeat);                }                return null;            },            'data_cadastro' => function () {                if(Session::get('action') == 'insert'){                    return new Date(time());                }            }        ];    }    public function reverseBehaviors()    {        return [];    }    public function rules()    {        return [            'email' => [                'required' => true,                'email' => true,            ],            'tipo' => [                'required' => true,            ],            'cpf' => [                'required' => true,                'cpf' => [(new Validator()), 'cpf'],                'safe'            ],            'repeat' => [                'safe'            ],            'senha' => [                'required' => function(){                    if(Session::get('action') == 'insert'){                        return true;                    }                    return false;                },                'equals' => [                    function($senha, $comp){                        if(Session::get('action') == 'insert'){                            return (new Validator())->equals($senha, $comp);                        }                        return true;                          },                    [                          $this->repeat                    ]                ],                'length' => [                    function($senha, $length){                        if(Session::get('action') == 'insert'){                            return (new Validator())->lengthLargerOrEqual($this->getOldValue('senha'), $length);                        }                        return true;                    },                    [                        6                    ]                ]            ],            'qualquer' => [                'required' => true,                'lenght' => [(new Validator()), 'between', [10, 20]],                'safe'                            ]        ];    }    public function messages(){        return [            'email' => [                'required' => 'Esse campo é obrigatório',                'email' => 'Insira um e-mail válido',            ],            'tipo' => [                'required' => 'Escolha uma opção',            ],            'senha' => [                'required' => 'Esse campo é obrigatório',                'equals' => 'Esse campo deve ser igual ao campo repita a senha.',                'length' => 'Esse campo deve ter no minimo 6 caracteres',            ],            'cpf' => [                'required' => 'Esse campo é obrigatório',                'cpf' => 'Entre com um CPF válido',            ],            'qualquer' => [                'required' => 'Esse campo é obrigatório',                'lenght' => 'Digite um valor maior que 10 e menor que 20',            ]        ];    }    public function labels()    {        return [            'nome' => 'Nome: ',            'email' => 'E-mail: ',            'senha' => 'Senha: ',            'tipo' => 'Tipo do usuário: ',            'cpf' => 'CPF: ',            'repeat' => 'Repita a senha: ',            'qualquer' => 'Digite um número: '        ];    }}