<?phpuse Winged\Model\Model;use Winged\Database\DbDict;use Winged\Date\Date;/** * Class News */class News extends Model{    public function __construct()    {        parent::__construct();        $this->mobile = new \MobileDetect();        return $this;    }    public $mobile = null;    /**     * @var $categorias array | NewsNewsCategorias[]     */    public $categorias;    /**     * @var $slug Slugs     */    public $slug;    /** @var $id_new integer */    public $id_new;    /** @var $categorias array */    public $id_categoria;    /** @var $id_usuario int | Usuarios */    public $id_usuario;    /** @var $title_tag string */    public $title_tag;    /** @var $titulo string */    public $titulo;    /** @var $previa string */    public $previa;    /** @var $post string */    public $post;    /** @var $data_cadastro Date() */    public $data_cadastro;    /** @var $data_alteracao Date() */    public $data_alteracao;    /** @var $imagem string | Midias */    public $image;    /** @var $share_image string */    public $share_image;    /** @var $status integer */    public $status;    /** @var $is_video int */    public $is_video = 0;    /** @var $from_youtube string */    public $from_youtube;    /** @var $video_source int | string | Midias */    public $video_source;    /** @var $ordem int */    public $ordem;    /*     * outra propriedades não triviais     */    /**     * @var $cep string     */    public $cep;    /**     * @var $estado string     */    public $estado;    /**     * @var $cidade string     */    public $cidade;    /**     * @var $bairro string     */    public $bairro;    /**     * @var $uf string     */    public $uf;    /**     * @var $rua string     */    public $rua;    /**     * @var $complemento string     */    public $complemento;    /**     * @var $numero string     */    public $numero;    /**     * @var $hora_inicio string | Date     */    public $hora_inicio;    /**     * @var $hora_fim string | Date     */    public $hora_fim;    /**     * @var $galeria string | array | Midias[]     */    public $galeria;    /**     * @var $is_default_image bool     */    public $is_default_image = false;    /*     * fim das propriedades não triviais     */    /**     * @return string     */    public static function tableName()    {        return "news";    }    /**     * @param $link     *     * @return mixed|null     */    public function videoId($link)    {        $video_id = null;        if (is_int(stripos($link, 'youtu.be')) && !is_int(stripos($link, 'watch'))) {            $link = explode('youtu.be/', $link);            $link = explode('?', end($link));            $link = explode('/', array_shift($link));            $video_id = array_shift($link);        } else if (is_int(stripos($link, 'embed'))) {            $link = explode('embed/', $link);            $link = explode('?', end($link));            $link = explode('/', array_shift($link));            $video_id = array_shift($link);        } else if (is_int(stripos($link, 'watch'))) {            parse_str(parse_url($link, PHP_URL_QUERY), $vars);            $video_id = $vars['v'];        }        return $video_id;    }    /**     * @return string     */    public static function primaryKeyName()    {        return "id_new";    }    /**     * @param bool $pk     *     * @return $this|int|Model     */    public function primaryKey($pk = false)    {        if ($pk && (is_int($pk) || intval($pk) != 0)) {            $this->id_new = $pk;            return $this;        }        return $this->id_new;    }    /**     * @return array     */    public function behaviors()    {        return [            'data_cadastro' => function () {                if (Admin::isInsert() || $this->data_cadastro == null || $this->data_cadastro == '') {                    $this->data_cadastro = new Date(time());                }            },            'data_alteracao' => function () {                $this->data_alteracao = new Date(time());            },            'post' => function () {                $html = $this->post;                $return = stripslashes(nltobr(htmlentities($html, ENT_NOQUOTES)));                $_POST[__CLASS__]['post'] = $return;                return $return;            },            'previa' => function () {                return nltobr($this->previa);            },            'status' => function () {                if (Admin::isUpdate()) {                    if (!$this->loaded('status')) {                        return 0;                    }                }                return null;            },            'categorias' => function () {                if (is_array($this->categorias)) {                    if (array_key_exists('id_categoria', $this->categorias)) {                        $this->categorias = $this->categorias['id_categoria'];                        $this->onSaveSuccess(randid(6), function () {                            (new NewsNewsCategorias())->delete(['NNC' => NewsNewsCategorias::tableName()])                                ->where(ELOQUENT_EQUAL, ['NNC.' . News::primaryKeyName() => $this->primaryKey()])                                ->execute();                            foreach ($this->categorias as $categoria) {                                (new NewsNewsCategorias())->insert()                                    ->into(NewsNewsCategorias::tableName())                                    ->values([                                        NewsCategorias::primaryKeyName() => $categoria,                                        News::primaryKeyName() => $this->primaryKey()                                    ])->execute();                            }                        });                    }                } else {                    $this->categorias = [];                }            },            'is_video' => function () {                if (!$this->loaded('is_video')) {                    return 0;                }            },            'from_youtube' => function () {                if (!$this->loaded('from_youtube')) {                    return 0;                }            },            'galeria' => function () {                if (is_array($this->galeria)) {                    $this->galeria = json_encode($this->galeria);                } else {                    $this->galeria = json_encode([]);                }            }        ];    }    /**     * @return array     */    public function reverseBehaviors()    {        return [            'post' => function () {                $post = str_replace(['<br>', 'http:http://'], ['', 'http://'], html_entity_decode($this->post));                $html5 = new \Masterminds\HTML5();                $pQuery = \pQuery::parseStr($html5->saveHTML($html5->loadHTML($post)));                foreach ($pQuery->query('*[data-midia-id]') as $key => $node) {                    $midia = Midias::getMidiaById($node->attr('data-midia-id'));                    if ($midia->getFile()->exists()) {                        $pQuery->query('*[data-midia-id]')[$key]->after($midia->getAsHtml());                        $pQuery->query('*[data-midia-id]')[$key]->remove();                    }                }                $post = $pQuery->html();                while (stripos(($post), '</html>')) {                    $post = str_replace('</html>', '', $post);                }                while (stripos(($post), '<html>')) {                    $post = str_replace('<html>', '', $post);                }                while (stripos(($post), '<br /><br />')) {                    $post = str_replace('<br /><br />', '', $post);                }                $post = str_replace('<!DOCTYPE html>', '', $post);                $post = str_replace("\n", '', $post);                $post = str_replace("<br /><p>", '<p>', $post);                $post = str_replace("</p><br />", '</p>', $post);                $post = str_replace("<p></p>", '', $post);                $post = str_replace("<p><br /></p>", '', $post);                if (Login::permission() || Login::permissionAdm()) {                    return '<p><br></p>' . $post;                } else {                    return $post;                }            },            'previa' => function () {                return brtonl($this->previa);            },            'slug' => function () {                $this->slug = Slugs::getSlug($this->primaryKey(), News::tableName());            },            'categorias' => function () {                $categorias = (new NewsNewsCategorias())->select()                    ->from(['NNC' => NewsNewsCategorias::tableName()])                    ->innerJoin(ELOQUENT_EQUAL, ['NC' => NewsCategorias::tableName(), 'NC.' . NewsCategorias::primaryKeyName() => 'NNC.' . NewsCategorias::primaryKeyName()])                    ->where(ELOQUENT_EQUAL, ['NNC.' . News::primaryKeyName() => $this->primaryKey()])                    ->execute();                if ($categorias) {                    return $categorias;                }                return [];            },            'video_source' => function () {                if (intval($this->video_source) > 0) {                    $this->video_source = Midias::getMidiaById($this->video_source);                }            },            'image' => function () {                if (intval($this->image) > 0) {                    $this->image = Midias::getMidiaById($this->image);                } else {                    $this->is_default_image = true;                    $this->image = new Midias('./assets/images/defaults/og_image.png');                }            },            'galeria' => function () {                try {                    $this->galeria = json_decode($this->galeria);                } catch (\Exception $exception) {                    $this->galeria = [];                }                if (!empty($this->galeria)) {                    $midias = (new Midias())->select()                        ->from(['M' => Midias::tableName()])                        ->where(ELOQUENT_IN, ['M.' . Midias::primaryKeyName() => $this->galeria])                        ->execute();                    if ($midias) {                        $this->galeria = $midias;                    }                }            }        ];    }    /**     * @return array     */    public function labels()    {        return [            'id_categoria' => 'Categoria do post: ',            'titulo' => 'Título do post: ',            'title_tag' => 'Título da página (o que aparece na aba do navegador): ',            'previa' => 'Previa: ',            'post' => 'Corpo do post: ',            'status' => 'Inativo / Ativo: ',            'is_video' => 'A capa do post é um vídeo: ',            'from_youtube' => 'O vídeo vem do Youtube: ',            'video_source' => 'Link para o vídeo do Youtube:  ',            'cep' => 'CEP',            'estado' => 'Estado: ',            'cidade' => 'Cidade: ',            'bairro' => 'Bairro: ',            'uf' => 'UF: ',            'rua' => 'Rua: ',            'complemento' => 'Complemento: ',            'numero' => 'Número',            'hora_inicio' => 'O evento / curso começa dia: ',            'hora_fim' => 'O evento / curso termina dia: ',        ];    }    /**     * @return array     */    public function rules()    {        return [            'titulo' => [                'required' => true,                'db' => Slugs::exists($this->titulo)            ],            'previa' => [                'required' => true,            ],            'post' => [                'required' => true,            ],            'hora_inicio' => [                'req' => function () {                    if (in_array(intval($this->id_categoria), [32, 33])) {                        return !trim($this->hora_inicio) == '';                    }                    return true;                }            ],            'hora_fim' => [                'req' => function () {                    if (in_array(intval($this->id_categoria), [32, 33])) {                        return !trim($this->hora_fim) == '';                    }                    return true;                }            ],            'cep' => [                'req' => function () {                    if (in_array(intval($this->id_categoria), [32, 33])) {                        return !trim($this->cep) == '';                    }                    return true;                }            ],            'numero' => [                'req' => function () {                    if (in_array(intval($this->id_categoria), [32, 33])) {                        return !trim($this->numero) == '';                    }                    return true;                }            ]        ];    }    /**     * @return array     */    public function messages()    {        return [            'titulo' => [                'required' => 'Este campo é obrigatório',                'db' => 'Esse nome já é utilizado por outro registro dentro do banco de dados'            ],            'previa' => [                'required' => 'Este campo é obrigatório',            ],            'post' => [                'required' => 'Este campo é obrigatório',            ],            'hora_inicio' => [                'req' => 'A data de inicio é requirida quando você deseja adicionar uma notícia nas categorias [cursos, eventos]'            ],            'hora_fim' => [                'req' => 'A data de fim é requirida quando você deseja adicionar uma notícia nas categorias [cursos, eventos]'            ],            'cep' => [                'req' => 'O cep é requirido quando você deseja adicionar uma notícia nas categorias [cursos, eventos]'            ],            'numero' => [                'req' => 'O número é requirido quando você deseja adicionar uma notícia nas categorias [cursos, eventos]'            ]        ];    }    public function isDefaultImage(){        return $this->is_default_image;    }}