<?phpnamespace Winged\Model;use Winged\Database\DbDict;use Winged\Date\Date;use Winged\Formater\Formater;use Winged\Upload\Upload;use Winged\Utils\RandomName;use Winged\Winged;use WingedConfig;use Admin;use UploadAbstract;class News extends Model{    public function __construct()    {        parent::__construct();        $this->mobile = new \MobileDetect();        return $this;    }    public $mobile = null;    public $folder = './uploads/news/';    /** @var $id_new integer */    public $id_new;    /** @var $categorias array */    public $categorias = [];    /** @var $id_usuario int | Usuarios */    public $id_usuario;    /** @var $titulo string */    public $titulo;    /** @var $previa string */    public $previa;    /** @var $post string */    public $post;    /** @var $data_cadastro Date() */    public $data_cadastro;    /** @var $data_alteracao Date() */    public $data_alteracao;    /** @var $imagem string */    public $imagem;    /** @var $slug string */    public $slug;    /** @var $status integer */    public $status;    /** @var $og_title string */    public $og_title;    /** @var $og_description string */    public $og_description;    /** @var $og_imagem string */    public $og_imagem;    /** @var $tipo int */    public $tipo = 0;    /** @var $youtube string */    public $youtube;    /** @var $post_type int */    public $post_type;    /** @var $ordem int */    public $ordem;    /** @var $autores array */    public $autores = [];    /** @var $anexos array */    public $anexos = [];    /** @var $keep_files array */    public $keep_files = [];    /** @var $remove_files array */    public $remove_files = [];    /** @var $page_views int */    public $page_views;    /** @var $unic_page_views int */    public $unic_page_views;    public static function tableName()    {        return "news";    }    public function videoId($link)    {        $video_id = null;        if (is_int(stripos($link, 'youtu.be')) && !is_int(stripos($link, 'watch'))) {            $link = explode('youtu.be/', $link);            $link = explode('?', end($link));            $link = explode('/', array_shift($link));            $video_id = array_shift($link);        } else if (is_int(stripos($link, 'embed'))) {            $link = explode('embed/', $link);            $link = explode('?', end($link));            $link = explode('/', array_shift($link));            $video_id = array_shift($link);        } else if (is_int(stripos($link, 'watch'))) {            parse_str(parse_url($link, PHP_URL_QUERY), $vars);            $video_id = $vars['v'];        }        return $video_id;    }    public static function primaryKeyName()    {        return "id_new";    }    public function primaryKey($pk = false)    {        if ($pk && (is_int($pk) || intval($pk) != 0)) {            $this->id_new = $pk;            return $this;        }        return $this->id_new;    }    public function behaviors()    {        return [            'slug' => function () {                return Formater::toUrl($this->titulo);            },            'data_cadastro' => function () {                if (Admin::isInsert()) {                    return (new Date())->sql();                }            },            'data_alteracao' => function () {                return (new Date())->sql();            },            'imagem' => function () {                return (new UploadAbstract())->process_posted_image($this, 'imagem', Formater::toUrl($this->titulo));            },            'og_imagem' => function () {                return (new UploadAbstract())->process_posted_image($this, 'og_imagem', Formater::toUrl($this->titulo), 'og-');            },            'post' => function () {                $html = $this->post;                $return = stripslashes(nltobr(htmlentities($html, ENT_NOQUOTES)));                $_POST[__CLASS__]['post'] = $return;                return $return;            },            'previa' => function () {                return nltobr($this->previa);            },            'og_description' => function () {                return nltobr($this->og_description);            },            'post_type' => function () {                if (!$this->loaded('post_type')) {                    return 0;                }            },            'status' => function () {                if (Admin::isUpdate()) {                    if (!$this->loaded('status')) {                        return 0;                    }                }            },            'autores' => function () {                if (is_array($this->autores)) {                    return json_encode($this->autores);                }                return ['null' => null];            },            'remove_files' => function () {                if (is_array($this->remove_files)) {                    foreach ($this->remove_files as $remove) {                        if (file_exists($remove) && is_file($remove)) {                            unlink($remove);                        }                    }                }                $this->unload('keep_files');                return ['null' => null];            },            'anexos' => function () {                $upload = new Upload();                $upload->setOptions('./uploads/news/anexos/', 'img,doc,zip,audio,video', '', '', 64, 'preserve');                $files = $upload->uploadFileModel('News', 'anexos');                if ($files) {                    $paths = [];                    foreach ($files as $file) {                        if ($file['status']) {                            $paths[] = $file['path'];                        }                    }                    if (!empty($this->keep_files)) {                        $paths = array_unique(array_merge($this->keep_files, $paths));                    }                    foreach ($paths as $key => $path) {                        $file = explode('/', $path);                        $fname = array_pop($file);                        $exp = explode('.', $fname);                        $paths[$key] = implode('/', $file) . '/' . Formater::toUrl($exp[0]) . '.' . $exp[1];                        rename($path, implode('/', $file) . '/' . Formater::toUrl($exp[0]) . '.' . $exp[1]);                    }                    $paths = array_unique($paths);                    return json_encode($paths);                } else {                    if (!empty($this->keep_files)) {                        $paths = array_unique(array_merge($this->keep_files));                    } else {                        $paths = [];                    }                    foreach ($paths as $key => $path) {                        $file = explode('/', $path);                        $fname = array_pop($file);                        $exp = explode('.', $fname);                        $paths[$key] = implode('/', $file) . '/' . Formater::toUrl($exp[0]) . '.' . $exp[1];                        rename($path, implode('/', $file) . '/' . Formater::toUrl($exp[0]) . '.' . $exp[1]);                    }                    $paths = array_unique($paths);                    return json_encode($paths);                }                return ['null' => null];            },            'keep_files' => function () {                $this->unload('keep_files');                return ['null' => null];            },            'categorias' => function () {                if (!empty($this->categorias)) {                    return json_encode($this->categorias);                }                return ['null' => null];            },        ];    }    public function reverseBehaviors()    {        return [            'post' => function () {                return str_replace(['<br>', 'http:http://'], ['', 'http://'], html_entity_decode($this->post));            },            'previa' => function () {                return brtonl($this->previa);            },            'og_description' => function () {                return brtonl($this->og_description);            },            'autores' => function () {                if (is_string($this->autores) && $this->autores != '') {                    return json_decode($this->autores);                }                return [];            },            'anexos' => function () {                if (is_string($this->anexos) && $this->anexos != '') {                    return json_decode($this->anexos);                }                return [];            },            'categorias' => function () {                if (is_string($this->categorias) && $this->categorias != '') {                    $json = json_decode($this->categorias);                    if (is_array($json)) {                        return $json;                    }                    return [];                }                return [];            },        ];    }    public function labels()    {        return [            'categorias' => 'Categorias da notícia: ',            'titulo' => 'Título: ',            'previa' => 'Previa: ',            'post' => 'Texto: ',            'og_title' => 'Título para o Facebook: ',            'og_description' => 'Descrição para o Facebook: ',            'status' => 'Ativa / Inativa: ',            'tipo' => 'Mídia principal do post: ',            'youtube' => 'Link do youtube: ',            'post_type' => 'Somente imagem: ',            'autores' => 'Autores desta noticia / artigo: '        ];    }    public function rules()    {        return [            'titulo' => [                'required' => true,                'db' => function () {                    if (Admin::isInsert()) {                        $model = (new News())                            ->select()                            ->from(['NEWS' => 'news'])                            ->where(ELOQUENT_EQUAL, ['NEWS.slug' => $this->slug])                            ->one();                    } else {                        $model = (new News())                            ->select()                            ->from(['NEWS' => 'news'])                            ->where(ELOQUENT_EQUAL, ['NEWS.slug' => $this->slug])                            ->andWhere(ELOQUENT_DIFFERENT, ['NEWS.' . News::primaryKeyName() => $this->primaryKey()])                            ->one();                    }                    if ($model) {                        return false;                    }                }            ],            'previa' => [                'required' => true,            ],            'post' => [                'required' => true,            ],            'og_title' => [                'required' => true,            ],            'og_description' => [                'required' => true,            ],            'keep_files' => [                'safe' => 'safe'            ],            'remove_files' => [                'safe' => 'safe'            ],            'categorias' => [                'empty' => function () {                    if (is_null($this->categorias) || empty($this->categorias) || !$this->loaded('categorias')) {                        return false;                    }                    return true;                }            ]        ];    }    public function messages()    {        return [            'categorias' => [                'empty' => 'A notícia precisa ter ao menos uma categoria.',            ],            'titulo' => [                'required' => 'Este campo é obrigatório',                'db' => 'Já existe uma notícia com título semelhante na base de dados',            ],            'previa' => [                'required' => 'Este campo é obrigatório',            ],            'post' => [                'required' => 'Este campo é obrigatório',            ],            'og_title' => [                'required' => 'Este campo é obrigatório',            ],            'og_description' => [                'required' => 'Este campo é obrigatório',            ],        ];    }    public function getImagem($field = 'imagem')    {        if (property_exists(get_class($this), $field)) {            if ($this->{$field} != '') {                if (file_exists($this->folder . $this->{$field})) {                    if($this->mobile->isMobile()){                        $exp = explode('.', $this->{$field});                        return Winged::$protocol . $this->folder . array_shift($exp) . '_mobile.' . end($exp);                    }else{                        return Winged::$protocol . $this->folder . $this->{$field};                    }                }            }        }        return false;    }    public function getImagemPath($field = 'imagem')    {        if (property_exists(get_class($this), $field)) {            if ($this->{$field} != '') {                if (file_exists($this->folder . $this->{$field})) {                    if($this->mobile->isMobile()){                        $exp = explode('.', $this->{$field});                        return $this->folder . array_shift($exp) . '_mobile.' . end($exp);                    }else{                        return $this->folder . $this->{$field};                    }                }            }        }        return false;    }}