<?phpuse Winged\Model\Model;use Winged\Date\Date;use Winged\Formater\Formater;use Winged\Http\Session;use Winged\Database\DbDict;/** * Class Produtos */class Produtos extends Model{    public function __construct()    {        parent::__construct();        return $this;    }    /** @var $id_produto integer */    public $id_produto;    /** @var $id_usuario integer */    public $id_usuario;    /** @var $id_categoria integer */    public $id_categoria;    /** @var $id_subcategoria integer */    public $id_subcategoria;    /** @var $nome string */    public $nome;    /** @var $cod_barras string */    public $cod_barras;    /** @var $valor_unitario integer */    public $valor_unitario;    /** @var $valor_atacado integer */    public $valor_atacado;    /** @var $valor_minimo integer */    public $valor_minimo;    /** @var $valor_de_custo integer */    public $valor_de_custo;    /** @var $quantidade_estoque integer */    public $quantidade_estoque;    /** @var $descricao integer */    public $descricao;    /** @var $status integer */    public $status;    /** @var $data_cadastro string */    public $data_cadastro;    /**     * @return string     */    public static function tableName()    {        return "produtos";    }    /**     * @return string     */    public static function primaryKeyName()    {        return "id_produto";    }    /**     * @param bool $pk     *     * @return $this|int|Model     */    public function primaryKey($pk = false)    {        if ($pk && (is_int($pk) || intval($pk) != 0)) {            $this->id_produto = $pk;            return $this;        }        return $this->id_produto;    }    /**     * @return array     */    public function behaviors()    {        return [            'valor_unitario' => function () {                if (Login::currentIsAdm() || \Admin::isInsert()) {                    return $this->valor_unitario * 100;                }                $this->unload('valor_unitario');                return ['null' => null];            },            'valor_atacado' => function () {                if (Login::currentIsAdm() || \Admin::isInsert()) {                    return $this->valor_atacado * 100;                }                $this->unload('valor_atacado');                return ['null' => null];            },            'valor_minimo' => function () {                if (Login::currentIsAdm() || \Admin::isInsert()) {                    return $this->valor_minimo * 100;                }                $this->unload('valor_minimo');                return ['null' => null];            },            'valor_de_custo' => function () {                if (Login::currentIsAdm() || \Admin::isInsert()) {                    return $this->valor_de_custo * 100;                }                $this->unload('valor_de_custo');                return ['null' => null];            },            'data_cadastro' => function () {                return (new Date())->sql();            }        ];    }    /**     * @return array     */    public function reverseBehaviors()    {        return [            'valor_unitario' => Formater::intToCurrency($this->valor_unitario),            'valor_atacado' => Formater::intToCurrency($this->valor_atacado),            'valor_minimo' => Formater::intToCurrency($this->valor_minimo),            'valor_de_custo' => Formater::intToCurrency($this->valor_de_custo),            'data_cadastro' => function () {                return (new Date($this->data_cadastro))->dmy();            }        ];    }    /**     * @return array     */    public function labels()    {        return [            'nome' => 'Nome do produto: ',            'cod_barras' => 'Código de barras: ',            'id_categoria' => 'Categoria para o produto: ',            'id_subcategoria' => 'Subcategoria para o produto: ',            'valor_unitario' => 'Valor unitário: ',            'valor_atacado' => 'Valor atacado: ',            'valor_minimo' => 'Valor mínimo',            'valor_de_custo' => 'Preço de custo: ',            'quantidade_estoque' => 'Quantidade em estoque: ',            'descricao' => 'Descrição: ',            'status' => 'Disponível / Indisponível',        ];    }    /**     * @return array     */    public function rules()    {        return [            'nome' => [                'required' => true,            ],            'id_categoria' => [                'required' => true,            ],            'valor_unitario' => [                'required' => true,                'int' => true,            ],            'valor_atacado' => [                'required' => true,                'int' => true,            ],            'valor_minimo' => [                'required' => true,                'int' => true,            ],            'valor_de_custo' => [                'required' => true,                'int' => true,            ],            'quantidade_estoque' => [                'required' => true,            ],            'cod_barras' => [                'required' => true,                'db' => function () {                    if (Session::get('action') == 'insert') {                        $model = (new Produtos())                            ->select()                            ->from(['PRODUTOS' => 'produtos'])                            ->where(ELOQUENT_EQUAL, ['PRODUTOS.cod_barras' => $this->cod_barras])                            ->one();                    } else {                        $model = (new Produtos())                            ->select()                            ->from(['PRODUTOS' => 'produtos'])                            ->where(ELOQUENT_EQUAL, ['PRODUTOS.cod_barras' => $this->cod_barras])                            ->andWhere(ELOQUENT_DIFFERENT, ['PRODUTOS.' . Produtos::primaryKeyName() => $this->primaryKey()])                            ->one();                    }                    if ($model) {                        return false;                    }                }            ],        ];    }    /**     * @return array     */    public function messages()    {        return [            'nome' => [                'required' => 'Esse campo é obrigatório',            ],            'id_categoria' => [                'required' => 'Esse campo é obrigatório',            ],            'valor_unitario' => [                'required' => 'Esse campo é obrigatório',                'int' => 'Valor inválido para este campo',            ],            'valor_atacado' => [                'required' => 'Esse campo é obrigatório',                'int' => 'Valor inválido para este campo',            ],            'valor_minimo' => [                'required' => 'Esse campo é obrigatório',                'int' => 'Valor inválido para este campo',            ],            'valor_de_custo' => [                'required' => 'Esse campo é obrigatório',                'int' => 'Valor inválido para este campo',            ],            'quantidade_estoque' => [                'required' => 'Esse campo é obrigatório',            ],            'cod_barras' => [                'required' => 'Esse campo é obrigatório',                'db' => 'Outro produto já está usando esse código de barras',            ],        ];    }}