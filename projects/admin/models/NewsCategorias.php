<?phpnamespace Winged\Model;use Winged\Formater\Formater;use Admin;use Winged\Database\DbDict;class NewsCategorias extends Model{    public function __construct()    {        parent::__construct();        return $this;    }    /** @var $id_categoria integer */    public $id_categoria;    /** @var $categoria string */    public $categoria;    /** @var $slug string */    public $slug;    public static function tableName()    {        return "news_categorias";    }    public static function primaryKeyName()    {        return "id_categoria";    }    public function primaryKey($pk = false)    {        if ($pk && (is_int($pk) || intval($pk) != 0)) {            $this->id_categoria = $pk;            return $this;        }        return $this->id_categoria;    }    public function behaviors()    {        return [            'slug' => function () {                return Formater::toUrl($this->categoria);            }        ];    }    public function reverseBehaviors()    {        return [];    }    public function labels()    {        return [            'categoria' => 'Nome da categoria: ',            'icone' => 'Nome do Ã­cone em [./assets/img/]: ',        ];    }    public function rules()    {        return [            'categoria' => [                'required' => true,                'db' => function () {                    if (Admin::isInsert()) {                        $model = (new NewsCategorias())                            ->select()                            ->from(['CATEGORIAS' => 'news_categorias'])                            ->where(ELOQUENT_EQUAL, ['CATEGORIAS.slug' => $this->slug])                            ->one();                    } else {                        $model = (new NewsCategorias())                            ->select()                            ->from(['CATEGORIAS' => 'news_categorias'])                            ->where(ELOQUENT_EQUAL, ['CATEGORIAS.slug' => $this->slug])                            ->andWhere(ELOQUENT_DIFFERENT, ['CATEGORIAS.' . NewsCategorias::primaryKeyName() => $this->primaryKey()])                            ->one();                    }                    if ($model) {                        return false;                    }                }            ]        ];    }    public function messages()    {        return [            'categoria' => [                'required' => 'Esse campo Ã© obrigatÃ³rio',                'db' => 'JÃ¡ existe uma categoria com nome semelhante na base de dados'            ]        ];    }    public function getParent()    {        if ($this->parent_id != '') {            return (new NewsCategorias())->findOne($this->parent_id);        }        return false;    }    public function getAllParent()    {        $parents = [];        while (($parent = $this->getParent())) {            $parents[] = $parent;        }        $reverse = array_reverse($parents);        $reverse[] = $this;        return $reverse;    }}