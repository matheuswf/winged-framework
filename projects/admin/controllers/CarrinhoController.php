<?phpuse Winged\Controller\Controller;use Winged\Model\Login;use Winged\Model\Carrinho;use Winged\Model\TempCart;use Winged\Database\DbDict;use Winged\Model\Produtos;use Winged\Formater\Formater;use Winged\Model\EnderecosClientes;use Winged\Model\Cidades;use Winged\Model\Estados;use Winged\Model\Bairros;use Winged\Date\Date;use Winged\Model\Clientes;use Winged\Model\Pedidos;use Winged\Winged;use Winged\Http\Session;class CarrinhoController extends Controller{    public function __construct()    {        !Login::permission() ? $this->redirectTo() : null;        parent::__construct();        $this->dynamic('active_page_group', 'carrinho');        $this->dynamic('page_name', 'Carrinho');        $this->dynamic('page_action_string', 'Listando');        $this->dynamic('list', 'carrinho/');        $this->dynamic('insert', 'carrinho/insert/');        $this->dynamic('update', 'carrinho/update/');    }    private function recalc()    {        $model = new Carrinho();        $cart = (new TempCart())->select()->from(['TEMP' => 'temp_cart'])->where(ELOQUENT_EQUAL, ['TEMP.id_usuario' => Login::current()->primaryKey()])->one();        $models = $model->select(['CARRINHO.*', 'PRODUTOS.*', 'SUBCATEGORIAS.nome' => 'subcategoria', 'CATEGORIAS.nome' => 'categoria'])            ->from(['CARRINHO' => 'carrinho'])            ->leftJoin(ELOQUENT_EQUAL, ['PRODUTOS' => 'produtos', 'PRODUTOS.id_produto' => 'CARRINHO.id_produto'])            ->leftJoin(ELOQUENT_EQUAL, ['CATEGORIAS' => 'produtos_categorias', 'CATEGORIAS.id_categoria' => 'PRODUTOS.id_categoria'])            ->leftJoin(ELOQUENT_EQUAL, ['SUBCATEGORIAS' => 'produtos_subcategorias', 'SUBCATEGORIAS.id_subcategoria' => 'PRODUTOS.id_subcategoria'])            ->where(ELOQUENT_EQUAL, ['CARRINHO.id_usuario' => Login::current()->primaryKey()])            ->execute();        $quantidade_total = 0;        $valor_total = 0;        if ($models) {            foreach ($models as $model) {                $quantidade_total += $model->quantidade;                $valor_total += ($model->valor_unico - (($model->valor_unico * $model->porcentagem_desconto / 100))) * $model->quantidade;            }        }        if ($cart) {            return [                'quantidade_total' => $quantidade_total,                'valor_total' => $valor_total + $cart->valor_frete,            ];        }        return [            'quantidade_total' => $quantidade_total,            'valor_total' => $valor_total,        ];    }    public function actionAdd()    {        if (is_post()) {            if (postset('produto')) {                $id_produto = post('produto')['id_produto'];                if (!is_array($id_produto)) {                    $id_produto = [$id_produto];                }                $no_exists = [];                $get = (new Carrinho())->select()                    ->from(['C' => Carrinho::tableName()])                    ->leftJoin(ELOQUENT_EQUAL, ['PR' => Produtos::tableName(), 'PR.id_produto' => 'C.id_produto'])                    ->where(ELOQUENT_EQUAL, ['C.id_usuario' => Login::current()->primaryKey()])                    ->execute(true);                $ids_ = [];                if ($get) {                    $ids_ = array_column($get, 'id_produto');                }                $exists = array_intersect($id_produto, $ids_);                foreach ($id_produto as $id) {                    if (!in_array($id, $exists)) {                        $no_exists[] = $id;                    }                }                $updates = ['updates' => [], 'inserts' => []];                foreach ($exists as $ids) {                    $found = false;                    foreach ($get as $value) {                        if ($value['id_produto'] == $ids) {                            $found = $value;                            break;                        }                    }                    if ($found) {                        if (($found['quantidade'] + 1) < $found['quantidade_estoque']) {                            (new Carrinho())->update(['C' => Carrinho::tableName()])                                ->set([                                    'quantidade' => $found['quantidade'] + 1,                                ])                                ->where(ELOQUENT_EQUAL, ['C.id_carrinho' => $found['id_carrinho']])                                ->execute();                        }                        $updates['updates'][] = [                            'id_carrinho' => $found['id_carrinho'],                            'quantidade' => (($found['quantidade'] + 1) > $found['quantidade_estoque']) ? $found['quantidade'] : $found['quantidade'] + 1,                            'valor_final' => Formater::intToCurrency(($found['valor_unico'] - ($found['valor_unico'] * $found['porcentagem_desconto'] / 100)) * ($found['quantidade'] + 1)),                            'nome' => $found['nome'],                            'error' => (($found['quantidade'] + 1) > $found['quantidade_estoque']) ? true : false,                        ];                    }                }                if (count($no_exists) > 0) {                    $get = (new Produtos())->select()                        ->from(['PR' => Produtos::tableName()])                        ->where(ELOQUENT_IN, ['PR.id_produto' => $no_exists])                        ->execute();                    if ($get) {                        /**                         * @var $get Produtos[]                         */                        foreach ($get as $produto) {                            $loaded = (new Carrinho())->load([                                'Carrinho' => [                                    'id_produto' => $produto->id_produto,                                    'valor_unico' => $produto->valor_atacado * 100,                                    'quantidade' => 1,                                    'porcentagem_desconto' => 0,                                    'id_usuario' => Login::current()->primaryKey(),                                ]                            ]);                            $loaded->save();                            $loaded->valor_atacado = Formater::intToCurrency($produto->valor_atacado * 100);                            $loaded->nome = $produto->nome;                            $loaded->quantidade_estoque = $produto->quantidade_estoque;                            $loaded->valor_final = Formater::intToCurrency(($loaded->valor_unico - ($loaded->valor_unico * $loaded->porcentagem_desconto / 100)) * $loaded->quantidade);                            $loaded->valor_unico = Formater::intToCurrency($loaded->valor_unico);                            $updates['inserts'][] = $loaded;                        }                    }                }                $recalc = $this->recalc();                return ['status' => true, 'data' => $updates, 'quantidade_total' => $recalc['quantidade_total'], 'valor_total' => Formater::intToCurrency($recalc['valor_total'])];            }            return ['status' => false, 'error' => 'no product', 'message' => 'Você não selecionou nenhum produto.'];        }    }    public function actionRemoveAll()    {        if (is_post()) {            (new Carrinho())->delete(['CARRINHO' => 'carrinho'])->where(ELOQUENT_EQUAL, ['CARRINHO.id_usuario' => Login::current()->primaryKey()])->execute();            (new TempCart())->delete(['TEMP' => 'temp_cart'])->where(ELOQUENT_EQUAL, ['TEMP.id_usuario' => Login::current()->primaryKey()])->execute();            return [                'status' => true            ];        }    }    public function actionRemove()    {        if (is_post()) {            (new Carrinho())->delete(['CARRINHO' => 'carrinho'])                ->where(ELOQUENT_EQUAL, ['CARRINHO.id_carrinho' => post('id_carrinho')])                ->execute();            $recalc = $this->recalc();            if ($recalc['quantidade_total'] === 0) {                (new TempCart())->delete(['TEMP' => 'temp_cart'])->where(ELOQUENT_EQUAL, ['TEMP.id_usuario' => Login::current()->primaryKey()])->execute();            }            return [                'status' => true,                'quantidade_total' => $recalc['quantidade_total'],                'valor_total' => Formater::intToCurrency($recalc['valor_total']),            ];        }    }    public function actionSave()    {        if (is_post()) {            if ($_POST['agendamento'] == '') {                $_POST['agendamento'] = (new Date())->add(['s' => 1000])->dmy();            } else {                $_POST['agendamento'] .= ':00';            }            $_POST['valor_frete'] = preg_replace("/[^0-9]/", "", $_POST['valor_frete']);            $cart = (new TempCart())->select()->from(['TEMP' => 'temp_cart'])->where(ELOQUENT_EQUAL, ['TEMP.id_usuario' => Login::current()->primaryKey()])->one();            $enderecos = [];            $endereco = post('endereco');            $id_cliente = post('id_cliente') > 0 ? post('id_cliente') : 'null';            if ($id_cliente > 0) {                $enderecos_db = (new EnderecosClientes())->select()                    ->from(['ENDERECOS' => EnderecosClientes::tableName()])                    ->leftJoin(ELOQUENT_EQUAL, ['CIDADES' => Cidades::tableName(), 'CIDADES.' . Cidades::primaryKeyName() => 'ENDERECOS.' . Cidades::primaryKeyName()])                    ->leftJoin(ELOQUENT_EQUAL, ['ESTADOS' => Estados::tableName(), 'ESTADOS.' . Estados::primaryKeyName() => 'ENDERECOS.' . Estados::primaryKeyName()])                    ->leftJoin(ELOQUENT_EQUAL, ['BAIRROS' => Bairros::tableName(), 'BAIRROS.' . Bairros::primaryKeyName() => 'ENDERECOS.' . Bairros::primaryKeyName()])                    ->where(ELOQUENT_EQUAL, ['ENDERECOS.id_cliente' => $id_cliente])                    ->orderBy(ELOQUENT_DESC, 'ENDERECOS.id_endereco')                    ->execute();                if ($enderecos_db) {                    /**                     * @var $end_db EnderecosClientes                     */                    foreach ($enderecos_db as $end_db) {                        if ($end_db->principal == 1) {                            $enderecos[] = [                                'check' => true,                                'value' => trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado . ':::' . $end_db->id_bairro,                                'text' => trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado,                            ];                            $endereco = trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado . ':::' . $end_db->id_bairro;                        } else {                            $enderecos[] = [                                'check' => false,                                'value' => trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado . ':::' . $end_db->id_bairro,                                'text' => trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado,                            ];                        }                    }                    if ($endereco == '') {                        $endereco = $enderecos[0]['value'];                        $enderecos[0]['check'] = true;                    }                } else {                    $endereco = 'O cliente não possuí nenhum endereço cadastrado. Isso pode ser prejudicial ao gerar relatórios futuros.';                    $enderecos[] = [                        'check' => true,                        'value' => $endereco,                    ];                }            }            $warn = false;            if ((new Date(post('agendamento')))->smaller((new Date())->dmy())) {                $_POST['agendamento'] = (new Date())->add(['s' => 1000])->dmy();                $warn = 'A data de agendamento foi alterada automaticamente para hoje porque a data inserida era mais antiga que a data atual da mudança do carrinho ou é uma data inválida.';            }            $endereco = explode(':::', $endereco);            (new TempCart())->load(                [                    'TempCart' => [                        'id_carrinho' => $cart->primaryKey(),                        'id_cliente' => $id_cliente,                        'valor_frete' => post('valor_frete') == 0 ? '0' : post('valor_frete'),                        'agendamento' => (new Date(post('agendamento')))->sql(),                        'observacoes' => nltobr(post('observacoes')),                        'metodo_pagamento' => post('metodo_pagamento'),                        'endereco' => $endereco[0],                        'id_bairro' => $endereco[1],                        'innf' => post('innf'),                    ]                ]            )->save();            $recalc = $this->recalc();            return [                'status' => true,                'warn' => $warn,                'quantidade_total' => $recalc['quantidade_total'],                'valor_total' => Formater::intToCurrency($recalc['valor_total']),                'agendamento' => (new Date(post('agendamento')))->dmy(),                'enderecos' => $enderecos,            ];        }    }    public function actionClientes()    {        if (is_post()) {            $get = (new Clientes())                ->select()                ->from(['CLIENTES' => 'clientes'])                ->where(ELOQUENT_LIKE, ['LCASE(CLIENTES.nome)' => '%' . mb_strtolower(post('query'), 'UTF-8') . '%'])                ->orWhere(ELOQUENT_LIKE, ['LCASE(CLIENTES.nome_fantasia)' => '%' . mb_strtolower(post('query'), 'UTF-8') . '%'])                ->orWhere(ELOQUENT_LIKE, ['LCASE(CLIENTES.razao_social)' => '%' . mb_strtolower(post('query'), 'UTF-8') . '%'])                ->orWhere(ELOQUENT_LIKE, ['LCASE(CLIENTES.email)' => '%' . mb_strtolower(post('query'), 'UTF-8') . '%'])                ->orWhere(ELOQUENT_LIKE, ['LCASE(CLIENTES.cpf)' => '%' . mb_strtolower(post('query'), 'UTF-8') . '%'])                ->orWhere(ELOQUENT_LIKE, ['LCASE(CLIENTES.cnpj)' => '%' . mb_strtolower(post('query'), 'UTF-8') . '%'])                ->execute();            $data = [];            if ($get) {                $nome = '';                $x = 0;                foreach ($get as $g) {                    $data[$x] = [                        'id_cliente' => $g->primaryKey(),                        'nome' => $g->nome == '' ? ucwords(mb_strtolower($g->nome_fantasia, 'UTF-8')) : ucwords(mb_strtolower($g->nome, 'UTF-8')),                    ];                    $data[$x]['nome'] .= ' : ' . ucwords(mb_strtolower($g->nome_fantasia, 'UTF-8'));                    $data[$x]['nome'] .= $g->cnpj == '' ? ' : ' . ucwords(mb_strtolower($g->cpf, 'UTF-8')) : ' : ' . ucwords(mb_strtolower($g->cnpj, 'UTF-8'));                    $x++;                }                return ['data' => $data];            }            return ['data' => []];        }    }    public function actionFinish()    {        if (is_post()) {            if ($this->actionVerify()['status']) {                $cart = (new TempCart())->select()->from(['TEMP' => 'temp_cart'])->where(ELOQUENT_EQUAL, ['TEMP.id_usuario' => Login::current()->primaryKey()])->one();                $models = (new Carrinho())->select(['CARRINHO.*', 'PRODUTOS.*', 'SUBCATEGORIAS.nome' => 'subcategoria', 'CATEGORIAS.nome' => 'categoria'])                    ->from(['CARRINHO' => 'carrinho'])                    ->leftJoin(ELOQUENT_EQUAL, ['PRODUTOS' => 'produtos', 'PRODUTOS.id_produto' => 'CARRINHO.id_produto'])                    ->leftJoin(ELOQUENT_EQUAL, ['CATEGORIAS' => 'produtos_categorias', 'CATEGORIAS.id_categoria' => 'PRODUTOS.id_categoria'])                    ->leftJoin(ELOQUENT_EQUAL, ['SUBCATEGORIAS' => 'produtos_subcategorias', 'SUBCATEGORIAS.id_subcategoria' => 'PRODUTOS.id_subcategoria'])                    ->where(ELOQUENT_EQUAL, ['CARRINHO.id_usuario' => Login::current()->primaryKey()])                    ->execute();                if ($cart->id_cliente == 0) {                    return ['status' => false];                }                $id_pedido = (new Pedidos())->load([                    'Pedidos' => [                        'id_usuario' => Login::current()->primaryKey(),                        'id_cliente' => $cart->id_cliente,                        'id_bairro' => $cart->id_bairro,                        'valor_frete' => $cart->valor_frete,                        'endereco' => $cart->endereco,                        'agendamento' => $cart->agendamento,                        'observacoes' => $cart->observacoes,                        'metodo_pagamento' => $cart->metodo_pagamento,                        'status' => 1,                        'data_cadastro' => (new Date())->sql(),                        'innf' => $cart->innf,                    ]                ])->save();                /**                 * @var $model Carrinho                 */                foreach ($models as $model) {                    if ($cart->innf != 1) {                        (new Produtos())->update(['PRODUTOS' => 'produtos'])                            ->set([                                'quantidade_estoque' => $model->extra()->quantidade_estoque - $model->quantidade,                            ])                            ->where(ELOQUENT_EQUAL, ['PRODUTOS.id_produto' => $model->id_produto])                            ->execute();                    }                    /**                     * @var $produto Produtos                     */                    $produto = (new Produtos())->findOne($model->id_produto);                    (new PedidosProdutos())->load([                        'PedidosProdutos' => [                            'id_pedido' => $id_pedido,                            'id_produto' => $model->id_produto,                            'nome' => $model->extra()->nome,                            'valor_unico' => $model->valor_unico,                            'quantidade' => $model->quantidade,                            'porcentagem_desconto' => $model->porcentagem_desconto,                            'fix_custo' => $produto->valor_de_custo,                        ]                    ])->save();                }                if ($id_pedido) {                    (new Carrinho())->delete(['CARRINHO' => 'carrinho'])->where(ELOQUENT_EQUAL, ['CARRINHO.id_usuario' => Login::current()->primaryKey()])->execute();                    (new TempCart())->delete(['TEMP' => 'temp_cart'])->where(ELOQUENT_EQUAL, ['TEMP.id_usuario' => Login::current()->primaryKey()])->execute();                    return ['status' => true, 'id_pedido' => '#' . substr(strval("0000" . $id_pedido), -5)];                } else {                    return ['status' => false];                }            } else {                return $this->actionVerify();            }        }    }    public function actionVerify()    {        if (is_post()) {            $model = new Carrinho();            $models = $model->select(['CARRINHO.*', 'PRODUTOS.*', 'SUBCATEGORIAS.nome' => 'subcategoria', 'CATEGORIAS.nome' => 'categoria'])                ->from(['CARRINHO' => 'carrinho'])                ->leftJoin(ELOQUENT_EQUAL, ['PRODUTOS' => 'produtos', 'PRODUTOS.id_produto' => 'CARRINHO.id_produto'])                ->leftJoin(ELOQUENT_EQUAL, ['CATEGORIAS' => 'produtos_categorias', 'CATEGORIAS.id_categoria' => 'PRODUTOS.id_categoria'])                ->leftJoin(ELOQUENT_EQUAL, ['SUBCATEGORIAS' => 'produtos_subcategorias', 'SUBCATEGORIAS.id_subcategoria' => 'PRODUTOS.id_subcategoria'])                ->where(ELOQUENT_EQUAL, ['CARRINHO.id_usuario' => Login::current()->primaryKey()])                ->execute();            if ($models) {                foreach ($models as $model) {                    if ($model->valor_unico - (($model->valor_unico * $model->porcentagem_desconto / 100)) < $model->extra()->valor_minimo) {                        return ['status' => false];                    }                    if ($model->quantidade > $model->extra()->quantidade_estoque) {                        return ['status' => false];                    }                }                return ['status' => true];            }            return ['status' => false, 'empty' => true];        }    }    public function actionRefresh()    {        if (is_post()) {            $_POST['valor_unico'] = preg_replace("/[^0-9]/", "", $_POST['valor_unico']);            $_POST['quantidade'] = $_POST['quantidade'] == '' ? 0 : preg_replace("/[^0-9]/", "", $_POST['quantidade']);            $model = new Carrinho();            $model = $model->select(['CARRINHO.*', 'PRODUTOS.*', 'SUBCATEGORIAS.nome' => 'subcategoria', 'CATEGORIAS.nome' => 'categoria'])                ->from(['CARRINHO' => 'carrinho'])                ->leftJoin(ELOQUENT_EQUAL, ['PRODUTOS' => 'produtos', 'PRODUTOS.id_produto' => 'CARRINHO.id_produto'])                ->leftJoin(ELOQUENT_EQUAL, ['CATEGORIAS' => 'produtos_categorias', 'CATEGORIAS.id_categoria' => 'PRODUTOS.id_categoria'])                ->leftJoin(ELOQUENT_EQUAL, ['SUBCATEGORIAS' => 'produtos_subcategorias', 'SUBCATEGORIAS.id_subcategoria' => 'PRODUTOS.id_subcategoria'])                ->where(ELOQUENT_EQUAL, ['CARRINHO.id_carrinho' => post('id_carrinho')])                ->andWhere(ELOQUENT_EQUAL, ['CARRINHO.id_usuario' => Login::current()->primaryKey()])                ->one();            if ($model) {                if (post('quantidade') > $model->extra()->quantidade_estoque) {                    $recalc = $this->recalc();                    return [                        'status' => true,                        'error' => 'A quantidade inserida é maior que a quantidade em estoque, impossível alterar o carrinho.',                        'quantidade_total' => $recalc['quantidade_total'],                        'valor_total' => Formater::intToCurrency($recalc['valor_total']),                        'quantidade' => $model->quantidade,                        'valor_unico' => Formater::intToCurrency($model->valor_unico),                        'valor_final' => Formater::intToCurrency(($model->valor_unico - ($model->valor_unico * $model->porcentagem_desconto / 100)) * $model->quantidade),                        'valor_unitario_final' => Formater::intToCurrency($model->valor_unico - (($model->valor_unico * $model->porcentagem_desconto / 100))),                        'porcentagem_desconto' => $model->porcentagem_desconto,                    ];                }                if (post('valor_unico') < $model->extra()->valor_minimo) {                    $recalc = $this->recalc();                    return [                        'status' => true,                        'error' => 'O valor unitário final não pode ser menor que o valor mínimo.',                        'quantidade_total' => $recalc['quantidade_total'],                        'valor_total' => Formater::intToCurrency($recalc['valor_total']),                        'quantidade' => $model->quantidade,                        'valor_unico' => Formater::intToCurrency($model->valor_unico),                        'valor_final' => Formater::intToCurrency(($model->valor_unico - ($model->valor_unico * $model->porcentagem_desconto / 100)) * $model->quantidade),                        'valor_unitario_final' => Formater::intToCurrency($model->valor_unico - (($model->valor_unico * $model->porcentagem_desconto / 100))),                        'porcentagem_desconto' => $model->porcentagem_desconto,                    ];                }                if ((post('valor_unico') - (post('valor_unico') * post('porcentagem_desconto') / 100)) < ((int)$model->extra()->valor_minimo)) {                    $recalc = $this->recalc();                    return [                        'status' => true,                        'error' => 'A porcentagem de desconto inserida, faz com que o valor final fique menor que o valor mínimo do produto.',                        'quantidade_total' => $recalc['quantidade_total'],                        'valor_total' => Formater::intToCurrency($recalc['valor_total']),                        'quantidade' => $model->quantidade,                        'valor_unico' => Formater::intToCurrency($model->valor_unico),                        'valor_final' => Formater::intToCurrency(($model->valor_unico - ($model->valor_unico * $model->porcentagem_desconto / 100)) * $model->quantidade),                        'valor_unitario_final' => Formater::intToCurrency($model->valor_unico - (($model->valor_unico * $model->porcentagem_desconto / 100))),                        'porcentagem_desconto' => $model->porcentagem_desconto,                    ];                }                $status = (new Carrinho())->update(['CARRINHO' => 'carrinho'])                    ->set([                        'CARRINHO.quantidade' => post('quantidade'),                        'CARRINHO.valor_unico' => post('valor_unico'),                        'CARRINHO.porcentagem_desconto' => post('porcentagem_desconto') == 0 ? '0' : post('porcentagem_desconto'),                    ])                    ->where(ELOQUENT_EQUAL, ['CARRINHO.id_carrinho' => post('id_carrinho')])                    ->execute();                $recalc = $this->recalc();                return [                    'status' => $status,                    'quantidade_total' => $recalc['quantidade_total'],                    'valor_total' => Formater::intToCurrency($recalc['valor_total']),                    'quantidade' => post('quantidade'),                    'valor_unico' => Formater::intToCurrency(post('valor_unico')),                    'valor_final' => Formater::intToCurrency((post('valor_unico') - (post('valor_unico') * post('porcentagem_desconto') / 100)) * post('quantidade')),                    'valor_unitario_final' => Formater::intToCurrency((post('valor_unico') - (post('valor_unico') * post('porcentagem_desconto') / 100))),                    'porcentagem_desconto' => post('porcentagem_desconto'),                ];            }        }        return ['status' => false];    }    public function actionAddToCart()    {        if (postset('id_produto')) {            $produto = (new Produtos())->select(['PRODUTOS.*', 'SUBCATEGORIAS.nome' => 'subcategoria', 'CATEGORIAS.nome' => 'categoria'])                ->from(['PRODUTOS' => 'produtos'])                ->leftJoin(ELOQUENT_EQUAL, ['CATEGORIAS' => 'produtos_categorias', 'CATEGORIAS.id_categoria' => 'PRODUTOS.id_categoria'])                ->leftJoin(ELOQUENT_EQUAL, ['SUBCATEGORIAS' => 'produtos_subcategorias', 'SUBCATEGORIAS.id_subcategoria' => 'PRODUTOS.id_subcategoria'])                ->where(ELOQUENT_EQUAL, ['PRODUTOS.id_produto' => post('id_produto')])                ->andWhere(ELOQUENT_EQUAL, ['PRODUTOS.status' => 1])                ->one();            $carrinho_existes = (new Carrinho())->select()                ->from(['CARRINHO' => 'carrinho'])                ->where(ELOQUENT_EQUAL, ['CARRINHO.id_produto' => post('id_produto')])                ->andWhere(ELOQUENT_EQUAL, ['CARRINHO.id_usuario' => Login::current()->primaryKey()])                ->one();            if ($carrinho_existes && $produto) {                (new Carrinho())->update(['CARRINHO' => 'carrinho'])->set([                    'quantidade' => $carrinho_existes->quantidade + 1                ])                    ->where(ELOQUENT_EQUAL, ['CARRINHO.id_produto' => post('id_produto')])                    ->execute();                return ['status' => true, 'message' => 'Produto adicionado ao carrinho', 'id_carrinho' => $carrinho_existes->primaryKey()];            }            /**             * @var $produto Produtos | bool             */            if ($produto) {                if ($produto->quantidade_estoque == 0) {                    return ['status' => false, 'message' => 'O produto não foi adicionado porque ele não existe no estoque.'];                }                $toload = ['Carrinho' => [                    'id_usuario' => Login::current()->primaryKey(),                    'id_produto' => $produto->primaryKey(),                    'quantidade' => 1,                    'valor_unico' => $produto->valor_atacado * 100,                    'porcentagem_desconto' => 0,                ]];                $carrinho = (new Carrinho())->load($toload);                if ($carrinho->validate() && ($id = $carrinho->save())) {                    return ['status' => true, 'message' => 'Produto adicionado ao carrinho', 'id_carrinho' => $id];                }            }            return ['status' => false, 'message' => 'O produto não existe mais ou está indiponível'];        }    }    public function actionIndex()    {        $this->redirectTo(Winged::$page_surname . '/page/1');    }    public function actionPage()    {        $cart = (new TempCart())->select()->from(['TEMP' => 'temp_cart'])->where(ELOQUENT_EQUAL, ['TEMP.id_usuario' => Login::current()->primaryKey()])->one();        if (!$cart) {            $cart = new TempCart();            $cart->load([                'TempCart' => [                    'id_usuario' => Login::current()->primaryKey(),                    'id_cliente' => 'null',                    'valor_frete' => '0',                ]            ]);            $cart->save();        }        $endereco = '';        $enderecos = [];        $cart = (new TempCart())->select()->from(['TEMP' => 'temp_cart'])->where(ELOQUENT_EQUAL, ['TEMP.id_usuario' => Login::current()->primaryKey()])->one();        if ($cart->id_cliente > 0) {            $enderecos_db = (new EnderecosClientes())->select()                ->from(['ENDERECOS' => EnderecosClientes::tableName()])                ->leftJoin(ELOQUENT_EQUAL, ['CIDADES' => Cidades::tableName(), 'CIDADES.' . Cidades::primaryKeyName() => 'ENDERECOS.' . Cidades::primaryKeyName()])                ->leftJoin(ELOQUENT_EQUAL, ['ESTADOS' => Estados::tableName(), 'ESTADOS.' . Estados::primaryKeyName() => 'ENDERECOS.' . Estados::primaryKeyName()])                ->leftJoin(ELOQUENT_EQUAL, ['BAIRROS' => Bairros::tableName(), 'BAIRROS.' . Bairros::primaryKeyName() => 'ENDERECOS.' . Bairros::primaryKeyName()])                ->where(ELOQUENT_EQUAL, ['ENDERECOS.id_cliente' => $cart->id_cliente])                ->orderBy(ELOQUENT_DESC, 'ENDERECOS.id_endereco')                ->execute();            if ($enderecos_db) {                /**                 * @var $end_db EnderecosClientes                 */                foreach ($enderecos_db as $end_db) {                    if ($end_db->principal == 1) {                        $enderecos[] = [                            'check' => true,                            'value' => trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado . ':::' . $end_db->id_bairro,                            'text' => trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado,                        ];                        $endereco = trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado;                    } else {                        $enderecos[] = [                            'check' => false,                            'value' => trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado . ':::' . $end_db->id_bairro,                            'text' => trim($end_db->endereco) . ', ' . $end_db->numero . ', ' . $end_db->extra()->nome . ', ' . $end_db->extra()->cidade . ', ' . $end_db->extra()->estado,                        ];                    }                }                if ($endereco == '') {                    $endereco = $enderecos[0]['value'];                    $enderecos[0]['check'] = true;                }            } else {                $endereco = 'O cliente não possuí nenhum endereço cadastrado. Isso pode ser prejudicial ao gerar relatórios futuros.';                $enderecos[] = [                    'check' => true,                    'value' => $endereco,                ];            }        }        $clientes = ['data' => []];        if ($cart) {            $cliente = (new Clientes())->select()                ->from(['CLIENTES_hue' => 'clientes'])                ->where(ELOQUENT_EQUAL, ['CLIENTES_hue.id_cliente' => $cart->id_cliente])                ->execute(true);            if ($cliente) {                $cliente = (object)$cliente[0];                $cliente->nome = ($cliente->nome == '' ? ucwords(mb_strtolower($cliente->nome_fantasia, 'UTF-8')) : ucwords(mb_strtolower($cliente->nome, 'UTF-8'))) . (' : ' . ucwords(mb_strtolower($cliente->nome_fantasia, 'UTF-8'))) . ($cliente->cnpj == '' ? ' : ' . ucwords(mb_strtolower($cliente->cpf, 'UTF-8')) : ' : ' . ucwords(mb_strtolower($cliente->cnpj, 'UTF-8')));            }            $clientes = ['data' => [(array)$cliente]];        }        AdminAssets::init($this);        $this->appendJs('tokenstags', Winged::$parent . 'assets/js/pages/tokenstags.js');        $this->appendJs('numeric', Winged::$parent . 'assets/js/pages/numeric.js');        $this->appendJs('carrinho', Winged::$parent . 'assets/js/pages/carrinho.js');        $this->setNicknamesToUri(['page']);        $limit = get('limit') ? get('limit') : 10000;        $page = uri('page') ? uri('page') : 1;        $model = new Carrinho();        Session::remove('action');        $links = 1;        $model->select(['CARRINHO.*', 'PRODUTOS.*', 'SUBCATEGORIAS.nome' => 'subcategoria', 'CATEGORIAS.nome' => 'categoria'])            ->from(['CARRINHO' => 'carrinho'])            ->leftJoin(ELOQUENT_EQUAL, ['PRODUTOS' => 'produtos', 'PRODUTOS.id_produto' => 'CARRINHO.id_produto'])            ->leftJoin(ELOQUENT_EQUAL, ['CATEGORIAS' => 'produtos_categorias', 'CATEGORIAS.id_categoria' => 'PRODUTOS.id_categoria'])            ->leftJoin(ELOQUENT_EQUAL, ['SUBCATEGORIAS' => 'produtos_subcategorias', 'SUBCATEGORIAS.id_subcategoria' => 'PRODUTOS.id_subcategoria'])            ->where(ELOQUENT_EQUAL, ['CARRINHO.id_usuario' => Login::current()->primaryKey()]);        \Admin::buildSearchModel($model, [            'PRODUTOS.nome',            'PRODUTOS.valor_unitario',            'PRODUTOS.valor_atacado',            'PRODUTOS.valor_minimo',            'PRODUTOS.valor_de_custo',            'PRODUTOS.quantidade_estoque',        ]);        \Admin::buildOrderModel($model, [            'sort_nome' => 'PRODUTOS.nome',            'sort_valor_unitario' => 'PRODUTOS.valor_unitario',            'sort_valor_atacado' => 'PRODUTOS.valor_atacado',            'sort_valor_minimo' => 'PRODUTOS.valor_minimo',            'sort_valor_de_custo' => 'PRODUTOS.valor_de_custo',            'sort_quantidade_estoque' => 'PRODUTOS.quantidade_estoque',        ]);        $paginate = new Paginate($model->count(), $model);        $data = $paginate->getData($limit, $page);        $links = $paginate->createLinks($links, Winged::$page_surname);        $this->html(Winged::$page_surname . '/' . Winged::$page_surname . '/_index', [            'models' => $data->data,            'links' => $links,            'clientes' => $clientes,            'cart' => $cart,            'endereco' => $endereco,            'enderecos' => $enderecos,        ]);    }}