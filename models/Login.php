<?phpclass Login extends Usuarios{    /**     * @var $lastUser Login     */    private static $lastUser = null;    public function initSession()    {        CoreSession::always('TYPE', $this->session_namespace);        CoreSession::always('ID_USUARIO', $this->primaryKey());        CoreSession::always('EMAIL', $this->email);        CoreSession::always('NOME', $this->nome);        CoreCookie::always('TYPE', $this->session_namespace, 7);        CoreCookie::always('ID_USUARIO', $this->primaryKey(), 7);        CoreCookie::always('EMAIL', $this->email, 7);        CoreCookie::always('NOME', $this->nome, 7);    }    /**     * @return Login     */    public static function current()    {        if (self::$lastUser !== null) {            return self::$lastUser;        }        return (new Login());    }    public static function currentIsAdm()    {        if (self::$lastUser !== null) {            return self::$lastUser->session_namespace === 'ADM' ? true : false;        }        return false;    }    public static function permission()    {        if (($login = self::viewSession()) !== false) {            return $login;        }        return false;    }    public static function permissionAdm()    {        if (($login = self::viewSession()) !== false) {            if ($login->session_namespace == 'ADM') {                return $login;            }        }        return false;    }    /**     * @return bool | Login     */    private static function makeNewUser()    {        if (CoreSession::get('ID_USUARIO') || CoreCookie::get('ID_USUARIO')) {            $id = CoreSession::get('ID_USUARIO') !== false ? CoreSession::get('ID_USUARIO') : CoreCookie::get('ID_USUARIO');            if ($id) {                $login = new Login();                $login->autoLoadDb($id);                if ($login->primaryKey()) {                    self::$lastUser = $login;                    return $login;                }            }        }        return false;    }    private static function viewSession()    {        if (CoreSession::get('ID_USUARIO')) {            CoreCookie::always('TYPE', CoreSession::get('TYPE'), 7);            CoreCookie::always('ID_USUARIO', CoreSession::get('ID_USUARIO'), 7);            CoreCookie::always('EMAIL', CoreSession::get('EMAIL'), 7);            CoreCookie::always('NOME', CoreSession::get('NOME'), 7);        }        if (CoreCookie::get('ID_USUARIO')) {            CoreSession::always('TYPE', CoreCookie::get('TYPE'));            CoreSession::always('ID_USUARIO', CoreCookie::get('ID_USUARIO'));            CoreSession::always('EMAIL', CoreCookie::get('EMAIL'));            CoreSession::always('NOME', CoreCookie::get('NOME'));        }        if (CoreSession::get('ID_USUARIO') || CoreCookie::get('ID_USUARIO')) {            if (($login = self::makeNewUser()) !== false) {                return $login;            }        }        return false;    }    public static function destroySession()    {        CoreSession::remove('TYPE');        CoreSession::remove('ID_USUARIO');        CoreSession::remove('EMAIL');        CoreSession::remove('NOME');        CoreCookie::remove('TYPE');        CoreCookie::remove('ID_USUARIO');        CoreCookie::remove('EMAIL');        CoreCookie::remove('NOME');    }    public function rules()    {        return [            'email' => [                'required' => true,                'email' => true,            ],            'senha' => [                'required' => true,                'length' => [                    function ($senha, $length) {                        if (CoreSession::get('action') == 'insert') {                            return CoreValidator::lengthLargerOrEqual($this->getOldValue('senha'), $length);                        }                        return true;                    },                    [                        6                    ]                ]            ],        ];    }    public function messages()    {        return [            'email' => [                'required' => 'Esse campo é obrigatório',                'email' => 'Insira um e-mail válido',            ],            'senha' => [                'required' => 'Esse campo é obrigatório',                'length' => 'Esse campo deve ter no minimo 6 caracteres',            ]        ];    }    public function labels()    {        return [        ];    }}